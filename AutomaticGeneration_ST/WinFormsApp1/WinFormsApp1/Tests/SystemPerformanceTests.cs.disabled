using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System.Text;
using WinFormsApp1.Templates;
using WinFormsApp1.Devices;
using WinFormsApp1.Services;
using AutomaticGeneration_ST.Models;

namespace WinFormsApp1.Tests
{
    /// <summary>
    /// 系统性能测试 - 验证系统在各种负载下的性能表现
    /// </summary>
    /// <remarks>
    /// 状态: @deprecated-file
    /// 优先级: P0 (零风险级别)
    /// 废弃原因: 系统性能测试在v2.0架构重构后需要重新设计
    /// 废弃时间: 2025-06-20 (v2.0重构时)
    /// 废弃决策: 架构设计会议决定，现有性能测试与新架构不匹配
    /// 文件状态: 未被任何代码引用和调用
    /// 原文件路径: SystemPerformanceTests.cs
    /// 替代方案: 新架构中暂无对应的性能测试实现
    /// 历史版本: v1.5-v1.9版本中使用
    /// 建议: 可以安全注释整个文件
    /// 风险评估: 无风险
    /// 注释时间: 2025-08-15
    /// 注释人: 配置专家
    /// 清理计划: 计划在v2.1版本从版本控制中移除
    /// </remarks>
    public class SystemPerformanceTests
    {
        #region 私有字段

        private readonly List<PerformanceTestResult> _testResults = new();
        private readonly PerformanceCounters _performanceCounters = new();
        private readonly CancellationTokenSource _cancellationTokenSource = new();

        #endregion

        #region 性能测试结果类

        /// <summary>
        /// 性能测试结果
        /// </summary>
        public class PerformanceTestResult
        {
            public string TestName { get; set; } = "";
            public string TestCategory { get; set; } = "";
            public bool Success { get; set; }
            public string Message { get; set; } = "";
            public TimeSpan Duration { get; set; }
            public PerformanceMetrics Metrics { get; set; } = new();
            public Dictionary<string, object> Data { get; set; } = new();
            public Exception? Exception { get; set; }
            public DateTime Timestamp { get; set; } = DateTime.Now;
        }

        /// <summary>
        /// 性能指标
        /// </summary>
        public class PerformanceMetrics
        {
            public double ThroughputPerSecond { get; set; }      // 吞吐量（每秒操作数）
            public double AverageResponseTime { get; set; }     // 平均响应时间（毫秒）
            public double MaxResponseTime { get; set; }         // 最大响应时间（毫秒）
            public double MinResponseTime { get; set; }         // 最小响应时间（毫秒）
            public double P95ResponseTime { get; set; }         // 95百分位响应时间（毫秒）
            public double P99ResponseTime { get; set; }         // 99百分位响应时间（毫秒）
            public double CpuUsagePercent { get; set; }         // CPU使用率（%）
            public double MemoryUsageMB { get; set; }           // 内存使用量（MB）
            public double ErrorRate { get; set; }              // 错误率（%）
            public int ConcurrentOperations { get; set; }      // 并发操作数
            public double ResourceUtilization { get; set; }    // 资源利用率（%）
        }

        /// <summary>
        /// 性能计数器
        /// </summary>
        public class PerformanceCounters
        {
            private readonly Process _currentProcess = Process.GetCurrentProcess();
            private long _initialMemory;
            private DateTime _startTime;

            public void StartMeasurement()
            {
                _initialMemory = GC.GetTotalMemory(false);
                _startTime = DateTime.Now;
                GC.Collect(); // 强制垃圾回收以获得更准确的内存测量
                GC.WaitForPendingFinalizers();
                GC.Collect();
            }

            public PerformanceSnapshot TakeSnapshot()
            {
                return new PerformanceSnapshot
                {
                    Timestamp = DateTime.Now,
                    TotalMemoryMB = GC.GetTotalMemory(false) / 1024.0 / 1024.0,
                    WorkingSetMB = _currentProcess.WorkingSet64 / 1024.0 / 1024.0,
                    CpuTimeMs = _currentProcess.TotalProcessorTime.TotalMilliseconds,
                    ThreadCount = _currentProcess.Threads.Count,
                    HandleCount = _currentProcess.HandleCount
                };
            }

            public void Dispose()
            {
                _currentProcess?.Dispose();
            }
        }

        /// <summary>
        /// 性能快照
        /// </summary>
        public class PerformanceSnapshot
        {
            public DateTime Timestamp { get; set; }
            public double TotalMemoryMB { get; set; }
            public double WorkingSetMB { get; set; }
            public double CpuTimeMs { get; set; }
            public int ThreadCount { get; set; }
            public int HandleCount { get; set; }
        }

        /// <summary>
        /// 性能测试套件结果
        /// </summary>
        public class PerformanceSuiteResult
        {
            public string SuiteName { get; set; } = "";
            public int TotalTests { get; set; }
            public int PassedTests { get; set; }
            public int FailedTests { get; set; }
            public TimeSpan TotalDuration { get; set; }
            public List<PerformanceTestResult> Results { get; set; } = new();
            public PerformanceMetrics OverallMetrics { get; set; } = new();
            public double SuccessRate => TotalTests > 0 ? (double)PassedTests / TotalTests * 100 : 0;
            public bool MeetsPerformanceRequirements { get; set; }
        }

        #endregion

        #region 事件定义

        /// <summary>
        /// 性能测试进度事件
        /// </summary>
        public event EventHandler<string>? TestProgress;

        /// <summary>
        /// 性能测试完成事件
        /// </summary>
        public event EventHandler<PerformanceTestResult>? TestCompleted;

        /// <summary>
        /// 性能测试套件完成事件
        /// </summary>
        public event EventHandler<PerformanceSuiteResult>? TestSuiteCompleted;

        #endregion

        #region 主要测试方法

        /// <summary>
        /// 运行完整的性能测试套件
        /// </summary>
        public async Task<PerformanceSuiteResult> RunComprehensivePerformanceTestsAsync()
        {
            var suiteResult = new PerformanceSuiteResult
            {
                SuiteName = "ST自动生成器系统性能测试"
            };

            var stopwatch = Stopwatch.StartNew();
            _testResults.Clear();

            TestProgress?.Invoke(this, "开始系统性能测试...");

            try
            {
                _performanceCounters.StartMeasurement();

                // 1. 基础性能测试
                await RunBaselinePerformanceTestsAsync();

                // 2. 模板渲染性能测试
                await RunTemplateRenderingPerformanceTestsAsync();

                // 3. 设备管理性能测试
                await RunDeviceManagementPerformanceTestsAsync();

                // 4. 并发操作性能测试
                await RunConcurrencyPerformanceTestsAsync();

                // 5. 内存使用性能测试
                await RunMemoryUsagePerformanceTestsAsync();

                // 6. 大数据量处理性能测试
                await RunLargeDataProcessingPerformanceTestsAsync();

                // 7. 长时间运行稳定性测试
                await RunLongRunningStabilityTestsAsync();

                // 8. 资源清理性能测试
                await RunResourceCleanupPerformanceTestsAsync();

                stopwatch.Stop();

                // 汇总结果
                suiteResult.TotalTests = _testResults.Count;
                suiteResult.PassedTests = _testResults.Count(r => r.Success);
                suiteResult.FailedTests = _testResults.Count(r => !r.Success);
                suiteResult.TotalDuration = stopwatch.Elapsed;
                suiteResult.Results = new List<PerformanceTestResult>(_testResults);
                suiteResult.OverallMetrics = CalculateOverallMetrics();
                suiteResult.MeetsPerformanceRequirements = EvaluatePerformanceRequirements(suiteResult);

                TestProgress?.Invoke(this, $"性能测试完成 - 通过率: {suiteResult.SuccessRate:F1}%");
                TestSuiteCompleted?.Invoke(this, suiteResult);

                return suiteResult;
            }
            catch (Exception ex)
            {
                var errorResult = new PerformanceTestResult
                {
                    TestName = "性能测试套件执行",
                    TestCategory = "系统测试",
                    Success = false,
                    Message = $"性能测试套件执行失败: {ex.Message}",
                    Exception = ex,
                    Duration = stopwatch.Elapsed
                };

                _testResults.Add(errorResult);
                TestCompleted?.Invoke(this, errorResult);

                suiteResult.TotalTests = _testResults.Count;
                suiteResult.FailedTests = _testResults.Count;
                suiteResult.Results = new List<PerformanceTestResult>(_testResults);

                return suiteResult;
            }
        }

        #endregion

        #region 基础性能测试

        /// <summary>
        /// 运行基础性能测试
        /// </summary>
        private async Task RunBaselinePerformanceTestsAsync()
        {
            TestProgress?.Invoke(this, "执行基础性能测试...");

            // 测试系统启动时间
            await RunPerformanceTestAsync("系统启动性能", "基础性能", async () =>
            {
                var stopwatch = Stopwatch.StartNew();
                
                // 模拟系统组件初始化
                var templateManager = TemplateManager.Instance;
                var deviceManager = CompositeDeviceManager.Instance;
                var performanceMonitor = DevicePerformanceMonitor.Instance;

                // 检查初始化状态
                var templateCount = templateManager.GetAvailableTemplates().Count;
                var deviceCount = deviceManager.DeviceCount;
                var monitoringStatus = performanceMonitor.IsMonitoring;

                stopwatch.Stop();

                return new PerformanceMetrics
                {
                    AverageResponseTime = stopwatch.ElapsedMilliseconds,
                    ThroughputPerSecond = 1000.0 / stopwatch.ElapsedMilliseconds,
                    ConcurrentOperations = 1
                };
            }, 
            performanceRequirement: metrics => metrics.AverageResponseTime < 5000); // 系统启动应在5秒内完成

            // 测试基本操作响应时间
            await RunPerformanceTestAsync("基本操作响应时间", "基础性能", async () =>
            {
                var responseTimes = new List<double>();
                var templateManager = TemplateManager.Instance;

                for (int i = 0; i < 100; i++)
                {
                    var stopwatch = Stopwatch.StartNew();
                    
                    // 执行基本操作
                    var templates = templateManager.GetAvailableTemplates();
                    var cacheStats = templateManager.GetCacheStatistics();
                    
                    stopwatch.Stop();
                    responseTimes.Add(stopwatch.Elapsed.TotalMilliseconds);
                }

                return new PerformanceMetrics
                {
                    AverageResponseTime = responseTimes.Average(),
                    MinResponseTime = responseTimes.Min(),
                    MaxResponseTime = responseTimes.Max(),
                    P95ResponseTime = CalculatePercentile(responseTimes, 0.95),
                    P99ResponseTime = CalculatePercentile(responseTimes, 0.99),
                    ThroughputPerSecond = 100000.0 / responseTimes.Sum()
                };
            },
            performanceRequirement: metrics => metrics.AverageResponseTime < 50); // 基本操作应在50ms内完成
        }

        #endregion

        #region 模板渲染性能测试

        /// <summary>
        /// 运行模板渲染性能测试
        /// </summary>
        private async Task RunTemplateRenderingPerformanceTestsAsync()
        {
            TestProgress?.Invoke(this, "执行模板渲染性能测试...");

            // 测试单个模板渲染性能
            await RunPerformanceTestAsync("单模板渲染性能", "模板引擎", async () =>
            {
                var templateManager = TemplateManager.Instance;
                var testPoint = new Point
                {
                    Id = "PERF_TEST_01",
                    Name = "PerformanceTest",
                    Type = "AI",
                    HMITagName = "PERF_TAG_AI",
                    Description = "性能测试点位"
                };

                var renderTimes = new List<double>();

                for (int i = 0; i < 1000; i++)
                {
                    var stopwatch = Stopwatch.StartNew();
                    var result = await templateManager.RenderTemplateAsync("AI", testPoint);
                    stopwatch.Stop();
                    
                    renderTimes.Add(stopwatch.Elapsed.TotalMilliseconds);
                }

                return new PerformanceMetrics
                {
                    AverageResponseTime = renderTimes.Average(),
                    MinResponseTime = renderTimes.Min(),
                    MaxResponseTime = renderTimes.Max(),
                    P95ResponseTime = CalculatePercentile(renderTimes, 0.95),
                    P99ResponseTime = CalculatePercentile(renderTimes, 0.99),
                    ThroughputPerSecond = 1000000.0 / renderTimes.Sum(),
                    ErrorRate = 0 // 假设没有错误
                };
            },
            performanceRequirement: metrics => metrics.AverageResponseTime < 10 && metrics.ThroughputPerSecond > 100);

            // 测试批量模板渲染性能
            await RunPerformanceTestAsync("批量模板渲染性能", "模板引擎", async () =>
            {
                var templateManager = TemplateManager.Instance;
                var testPoints = GenerateTestPoints(100); // 生成100个测试点位
                
                var stopwatch = Stopwatch.StartNew();
                var tasks = new List<Task<string>>();

                foreach (var point in testPoints)
                {
                    tasks.Add(templateManager.RenderTemplateAsync(point.Type, point));
                }

                var results = await Task.WhenAll(tasks);
                stopwatch.Stop();

                var successCount = results.Count(r => !string.IsNullOrEmpty(r));
                var errorRate = (double)(results.Length - successCount) / results.Length * 100;

                return new PerformanceMetrics
                {
                    AverageResponseTime = stopwatch.ElapsedMilliseconds / (double)testPoints.Count,
                    ThroughputPerSecond = testPoints.Count * 1000.0 / stopwatch.ElapsedMilliseconds,
                    ErrorRate = errorRate,
                    ConcurrentOperations = testPoints.Count
                };
            },
            performanceRequirement: metrics => metrics.ThroughputPerSecond > 50 && metrics.ErrorRate < 1);

            // 测试模板缓存性能
            await RunPerformanceTestAsync("模板缓存性能", "模板引擎", async () =>
            {
                var templateManager = TemplateManager.Instance;
                var testPoint = new Point
                {
                    Id = "CACHE_PERF_TEST",
                    Name = "CachePerformanceTest",
                    Type = "DI",
                    HMITagName = "CACHE_PERF_TAG"
                };

                // 第一次渲染（缓存未命中）
                var firstRenderTime = await MeasureRenderTime(templateManager, testPoint);

                // 后续渲染（缓存命中）
                var cachedRenderTimes = new List<double>();
                for (int i = 0; i < 100; i++)
                {
                    cachedRenderTimes.Add(await MeasureRenderTime(templateManager, testPoint));
                }

                var avgCachedTime = cachedRenderTimes.Average();
                var cacheEfficiency = (firstRenderTime - avgCachedTime) / firstRenderTime * 100;

                return new PerformanceMetrics
                {
                    AverageResponseTime = avgCachedTime,
                    ThroughputPerSecond = 100000.0 / cachedRenderTimes.Sum(),
                    ResourceUtilization = Math.Max(0, Math.Min(100, cacheEfficiency))
                };
            },
            performanceRequirement: metrics => metrics.ResourceUtilization > 50); // 缓存应提供至少50%的性能提升
        }

        #endregion

        #region 设备管理性能测试

        /// <summary>
        /// 运行设备管理性能测试
        /// </summary>
        private async Task RunDeviceManagementPerformanceTestsAsync()
        {
            TestProgress?.Invoke(this, "执行设备管理性能测试...");

            // 测试设备创建性能
            await RunPerformanceTestAsync("设备创建性能", "设备管理", async () =>
            {
                var deviceManager = CompositeDeviceManager.Instance;
                var createTimes = new List<double>();
                var createdDevices = new List<string>();

                for (int i = 0; i < 50; i++)
                {
                    var deviceId = $"PERF_DEVICE_{i:D3}";
                    var deviceType = (CompositeDeviceType)(i % 6); // 循环使用不同设备类型

                    var stopwatch = Stopwatch.StartNew();
                    var result = await deviceManager.CreateDeviceAsync(deviceType, deviceId, $"性能测试设备{i}");
                    stopwatch.Stop();

                    if (result.Success)
                    {
                        createTimes.Add(stopwatch.Elapsed.TotalMilliseconds);
                        createdDevices.Add(deviceId);
                    }
                }

                // 清理创建的设备
                foreach (var deviceId in createdDevices)
                {
                    await deviceManager.RemoveDeviceAsync(deviceId);
                }

                return new PerformanceMetrics
                {
                    AverageResponseTime = createTimes.Average(),
                    MaxResponseTime = createTimes.Max(),
                    MinResponseTime = createTimes.Min(),
                    ThroughputPerSecond = createdDevices.Count * 1000.0 / createTimes.Sum(),
                    ErrorRate = (double)(50 - createdDevices.Count) / 50 * 100
                };
            },
            performanceRequirement: metrics => metrics.AverageResponseTime < 500 && metrics.ErrorRate < 5);

            // 测试设备批量操作性能
            await RunPerformanceTestAsync("设备批量操作性能", "设备管理", async () =>
            {
                var deviceManager = CompositeDeviceManager.Instance;
                var deviceIds = new List<string>();

                // 创建测试设备
                for (int i = 0; i < 20; i++)
                {
                    var deviceId = $"BATCH_PERF_DEVICE_{i:D2}";
                    var deviceType = (CompositeDeviceType)(i % 6);
                    var result = await deviceManager.CreateDeviceAsync(deviceType, deviceId, $"批量测试设备{i}");
                    if (result.Success)
                    {
                        deviceIds.Add(deviceId);
                    }
                }

                // 测试批量启动
                var startStopwatch = Stopwatch.StartNew();
                var startResults = await deviceManager.StartAllDevicesAsync();
                startStopwatch.Stop();

                // 测试批量停止
                var stopStopwatch = Stopwatch.StartNew();
                var stopResults = await deviceManager.StopAllDevicesAsync();
                stopStopwatch.Stop();

                // 测试批量诊断
                var diagStopwatch = Stopwatch.StartNew();
                var diagResults = await deviceManager.DiagnoseAllDevicesAsync();
                diagStopwatch.Stop();

                // 清理设备
                foreach (var deviceId in deviceIds)
                {
                    await deviceManager.RemoveDeviceAsync(deviceId);
                }

                var totalTime = startStopwatch.ElapsedMilliseconds + stopStopwatch.ElapsedMilliseconds + diagStopwatch.ElapsedMilliseconds;
                var totalOperations = startResults.Count + stopResults.Count + diagResults.Count;

                return new PerformanceMetrics
                {
                    AverageResponseTime = totalTime / 3.0, // 三种操作的平均时间
                    ThroughputPerSecond = totalOperations * 1000.0 / totalTime,
                    ConcurrentOperations = deviceIds.Count,
                    ErrorRate = 0 // 简化处理
                };
            },
            performanceRequirement: metrics => metrics.AverageResponseTime < 2000 && metrics.ThroughputPerSecond > 5);
        }

        #endregion

        #region 并发操作性能测试

        /// <summary>
        /// 运行并发操作性能测试
        /// </summary>
        private async Task RunConcurrencyPerformanceTestsAsync()
        {
            TestProgress?.Invoke(this, "执行并发操作性能测试...");

            // 测试并发模板渲染
            await RunPerformanceTestAsync("并发模板渲染性能", "并发处理", async () =>
            {
                var templateManager = TemplateManager.Instance;
                var concurrentTasks = 50;
                var renderingsPerTask = 20;
                
                var stopwatch = Stopwatch.StartNew();
                var allTasks = new List<Task>();

                // 创建并发任务
                for (int i = 0; i < concurrentTasks; i++)
                {
                    var taskIndex = i;
                    allTasks.Add(Task.Run(async () =>
                    {
                        for (int j = 0; j < renderingsPerTask; j++)
                        {
                            var testPoint = new Point
                            {
                                Id = $"CONCURRENT_{taskIndex}_{j}",
                                Name = $"ConcurrentTest{taskIndex}_{j}",
                                Type = j % 2 == 0 ? "AI" : "DI",
                                HMITagName = $"CONCURRENT_TAG_{taskIndex}_{j}"
                            };

                            await templateManager.RenderTemplateAsync(testPoint.Type, testPoint);
                        }
                    }));
                }

                await Task.WhenAll(allTasks);
                stopwatch.Stop();

                var totalOperations = concurrentTasks * renderingsPerTask;

                return new PerformanceMetrics
                {
                    AverageResponseTime = stopwatch.ElapsedMilliseconds / (double)totalOperations,
                    ThroughputPerSecond = totalOperations * 1000.0 / stopwatch.ElapsedMilliseconds,
                    ConcurrentOperations = concurrentTasks,
                    ErrorRate = 0 // 简化处理
                };
            },
            performanceRequirement: metrics => metrics.ThroughputPerSecond > 100 && metrics.ConcurrentOperations >= 50);

            // 测试并发设备操作
            await RunPerformanceTestAsync("并发设备操作性能", "并发处理", async () =>
            {
                var deviceManager = CompositeDeviceManager.Instance;
                var concurrentOperations = 30;
                
                var stopwatch = Stopwatch.StartNew();
                var tasks = new List<Task>();

                // 并发创建设备
                for (int i = 0; i < concurrentOperations; i++)
                {
                    var index = i;
                    tasks.Add(Task.Run(async () =>
                    {
                        var deviceId = $"CONCURRENT_DEVICE_{index:D2}";
                        var deviceType = (CompositeDeviceType)(index % 6);
                        
                        // 创建设备
                        var createResult = await deviceManager.CreateDeviceAsync(deviceType, deviceId, $"并发测试设备{index}");
                        
                        if (createResult.Success)
                        {
                            // 短暂等待后删除设备
                            await Task.Delay(100);
                            await deviceManager.RemoveDeviceAsync(deviceId);
                        }
                    }));
                }

                await Task.WhenAll(tasks);
                stopwatch.Stop();

                return new PerformanceMetrics
                {
                    AverageResponseTime = stopwatch.ElapsedMilliseconds / (double)concurrentOperations,
                    ThroughputPerSecond = concurrentOperations * 1000.0 / stopwatch.ElapsedMilliseconds,
                    ConcurrentOperations = concurrentOperations,
                    ErrorRate = 0 // 简化处理
                };
            },
            performanceRequirement: metrics => metrics.AverageResponseTime < 1000 && metrics.ConcurrentOperations >= 30);
        }

        #endregion

        #region 内存使用性能测试

        /// <summary>
        /// 运行内存使用性能测试
        /// </summary>
        private async Task RunMemoryUsagePerformanceTestsAsync()
        {
            TestProgress?.Invoke(this, "执行内存使用性能测试...");

            // 测试内存使用增长
            await RunPerformanceTestAsync("内存使用增长测试", "内存管理", async () =>
            {
                var initialSnapshot = _performanceCounters.TakeSnapshot();
                
                // 执行大量操作
                var templateManager = TemplateManager.Instance;
                var deviceManager = CompositeDeviceManager.Instance;
                
                var createdDevices = new List<string>();
                
                // 创建大量设备和模板渲染
                for (int i = 0; i < 100; i++)
                {
                    var deviceId = $"MEMORY_TEST_DEVICE_{i:D3}";
                    var deviceType = (CompositeDeviceType)(i % 6);
                    
                    var result = await deviceManager.CreateDeviceAsync(deviceType, deviceId, $"内存测试设备{i}");
                    if (result.Success)
                    {
                        createdDevices.Add(deviceId);
                        
                        // 为设备添加点位
                        var device = deviceManager.GetDevice(deviceId);
                        if (device != null)
                        {
                            for (int j = 0; j < 10; j++)
                            {
                                device.AddPoint(new Point
                                {
                                    Id = $"MEM_POINT_{i}_{j}",
                                    Name = $"MemPoint{i}_{j}",
                                    Type = j % 4 == 0 ? "AI" : j % 4 == 1 ? "AO" : j % 4 == 2 ? "DI" : "DO",
                                    HMITagName = $"MEM_TAG_{i}_{j}"
                                });
                            }
                            
                            // 生成ST代码
                            await device.GenerateSTCodeAsync();
                        }
                    }
                }
                
                var finalSnapshot = _performanceCounters.TakeSnapshot();
                
                // 清理创建的设备
                foreach (var deviceId in createdDevices)
                {
                    await deviceManager.RemoveDeviceAsync(deviceId);
                }
                
                // 强制垃圾回收
                GC.Collect();
                GC.WaitForPendingFinalizers();
                GC.Collect();
                
                var cleanupSnapshot = _performanceCounters.TakeSnapshot();
                
                var memoryGrowth = finalSnapshot.TotalMemoryMB - initialSnapshot.TotalMemoryMB;
                var memoryReclaimed = finalSnapshot.TotalMemoryMB - cleanupSnapshot.TotalMemoryMB;
                var memoryLeakage = cleanupSnapshot.TotalMemoryMB - initialSnapshot.TotalMemoryMB;

                return new PerformanceMetrics
                {
                    MemoryUsageMB = memoryGrowth,
                    ResourceUtilization = memoryReclaimed / memoryGrowth * 100, // 内存回收率
                    ErrorRate = Math.Max(0, memoryLeakage / memoryGrowth * 100) // 内存泄漏率
                };
            },
            performanceRequirement: metrics => metrics.ResourceUtilization > 80 && metrics.ErrorRate < 10);

            // 测试长时间运行内存稳定性
            await RunPerformanceTestAsync("长时间内存稳定性测试", "内存管理", async () =>
            {
                var templateManager = TemplateManager.Instance;
                var memorySnapshots = new List<double>();
                var testDurationMs = 30000; // 30秒测试
                var intervalMs = 1000; // 每秒测量一次
                
                var testPoint = new Point
                {
                    Id = "STABILITY_TEST",
                    Name = "StabilityTest",
                    Type = "AI",
                    HMITagName = "STABILITY_TAG"
                };

                var stopwatch = Stopwatch.StartNew();
                
                while (stopwatch.ElapsedMilliseconds < testDurationMs)
                {
                    // 执行一些操作
                    for (int i = 0; i < 10; i++)
                    {
                        await templateManager.RenderTemplateAsync("AI", testPoint);
                    }
                    
                    // 记录内存使用
                    var snapshot = _performanceCounters.TakeSnapshot();
                    memorySnapshots.Add(snapshot.TotalMemoryMB);
                    
                    await Task.Delay(intervalMs);
                }
                
                stopwatch.Stop();

                var avgMemory = memorySnapshots.Average();
                var maxMemory = memorySnapshots.Max();
                var minMemory = memorySnapshots.Min();
                var memoryVariance = memorySnapshots.Select(m => (m - avgMemory) * (m - avgMemory)).Average();
                var memoryStability = 100 - Math.Min(100, memoryVariance / avgMemory * 100);

                return new PerformanceMetrics
                {
                    MemoryUsageMB = avgMemory,
                    ResourceUtilization = memoryStability,
                    ThroughputPerSecond = memorySnapshots.Count * 10 * 1000.0 / testDurationMs // 每秒操作数
                };
            },
            performanceRequirement: metrics => metrics.ResourceUtilization > 95); // 内存使用应该相对稳定
        }

        #endregion

        #region 大数据量处理性能测试

        /// <summary>
        /// 运行大数据量处理性能测试
        /// </summary>
        private async Task RunLargeDataProcessingPerformanceTestsAsync()
        {
            TestProgress?.Invoke(this, "执行大数据量处理性能测试...");

            // 测试大量点位处理性能
            await RunPerformanceTestAsync("大量点位处理性能", "大数据处理", async () =>
            {
                var templateManager = TemplateManager.Instance;
                var largePointSet = GenerateTestPoints(1000); // 生成1000个测试点位
                
                var stopwatch = Stopwatch.StartNew();
                var renderTasks = new List<Task<string>>();
                
                // 批量处理点位
                foreach (var point in largePointSet)
                {
                    renderTasks.Add(templateManager.RenderTemplateAsync(point.Type, point));
                }
                
                var results = await Task.WhenAll(renderTasks);
                stopwatch.Stop();
                
                var successCount = results.Count(r => !string.IsNullOrEmpty(r));
                var totalCodeLength = results.Sum(r => r?.Length ?? 0);

                return new PerformanceMetrics
                {
                    AverageResponseTime = stopwatch.ElapsedMilliseconds / (double)largePointSet.Count,
                    ThroughputPerSecond = largePointSet.Count * 1000.0 / stopwatch.ElapsedMilliseconds,
                    ErrorRate = (double)(largePointSet.Count - successCount) / largePointSet.Count * 100,
                    ConcurrentOperations = largePointSet.Count,
                    ResourceUtilization = totalCodeLength / 1024.0 / 1024.0 // MB of generated code
                };
            },
            performanceRequirement: metrics => metrics.ThroughputPerSecond > 50 && metrics.ErrorRate < 1);

            // 测试大型设备系统性能
            await RunPerformanceTestAsync("大型设备系统性能", "大数据处理", async () =>
            {
                var deviceManager = CompositeDeviceManager.Instance;
                var largeSystemDevices = new List<string>();
                
                var stopwatch = Stopwatch.StartNew();
                
                // 创建大型设备系统
                for (int i = 0; i < 100; i++)
                {
                    var deviceId = $"LARGE_SYS_DEVICE_{i:D3}";
                    var deviceType = (CompositeDeviceType)(i % 6);
                    
                    var result = await deviceManager.CreateDeviceAsync(deviceType, deviceId, $"大型系统设备{i}");
                    if (result.Success)
                    {
                        largeSystemDevices.Add(deviceId);
                        
                        // 为每个设备添加多个点位
                        var device = deviceManager.GetDevice(deviceId);
                        if (device != null)
                        {
                            for (int j = 0; j < 20; j++)
                            {
                                device.AddPoint(new Point
                                {
                                    Id = $"LARGE_POINT_{i}_{j}",
                                    Name = $"LargePoint{i}_{j}",
                                    Type = new[] { "AI", "AO", "DI", "DO" }[j % 4],
                                    HMITagName = $"LARGE_TAG_{i}_{j}",
                                    Description = $"大型系统点位{i}_{j}"
                                });
                            }
                        }
                    }
                }
                
                // 生成整合的ST代码
                var integratedCode = await deviceManager.GenerateIntegratedSTCodeAsync();
                
                stopwatch.Stop();
                
                // 清理设备
                foreach (var deviceId in largeSystemDevices)
                {
                    await deviceManager.RemoveDeviceAsync(deviceId);
                }

                return new PerformanceMetrics
                {
                    AverageResponseTime = stopwatch.ElapsedMilliseconds,
                    ThroughputPerSecond = largeSystemDevices.Count * 1000.0 / stopwatch.ElapsedMilliseconds,
                    ConcurrentOperations = largeSystemDevices.Count,
                    ResourceUtilization = integratedCode.Length / 1024.0 / 1024.0, // MB of generated code
                    ErrorRate = (double)(100 - largeSystemDevices.Count) / 100 * 100
                };
            },
            performanceRequirement: metrics => metrics.ThroughputPerSecond > 5 && metrics.ErrorRate < 5);
        }

        #endregion

        #region 长时间运行稳定性测试

        /// <summary>
        /// 运行长时间运行稳定性测试
        /// </summary>
        private async Task RunLongRunningStabilityTestsAsync()
        {
            TestProgress?.Invoke(this, "执行长时间运行稳定性测试...");

            // 测试系统长时间稳定性
            await RunPerformanceTestAsync("系统长时间稳定性", "稳定性测试", async () =>
            {
                var templateManager = TemplateManager.Instance;
                var deviceManager = CompositeDeviceManager.Instance;
                var performanceMonitor = DevicePerformanceMonitor.Instance;
                
                var testDuration = TimeSpan.FromMinutes(2); // 2分钟稳定性测试
                var operationInterval = TimeSpan.FromSeconds(1); // 每秒执行一次操作
                
                var stopwatch = Stopwatch.StartNew();
                var operationCount = 0;
                var errorCount = 0;
                var performanceSnapshots = new List<PerformanceSnapshot>();
                
                // 启动性能监控
                if (!performanceMonitor.IsMonitoring)
                {
                    performanceMonitor.StartMonitoring();
                }
                
                while (stopwatch.Elapsed < testDuration && !_cancellationTokenSource.Token.IsCancellationRequested)
                {
                    try
                    {
                        // 执行各种操作
                        var testPoint = new Point
                        {
                            Id = $"STABILITY_{operationCount}",
                            Name = $"StabilityTest{operationCount}",
                            Type = new[] { "AI", "AO", "DI", "DO" }[operationCount % 4],
                            HMITagName = $"STABILITY_TAG_{operationCount}"
                        };
                        
                        // 模板渲染
                        await templateManager.RenderTemplateAsync(testPoint.Type, testPoint);
                        
                        // 设备操作（如果有设备）
                        if (deviceManager.DeviceCount > 0)
                        {
                            var stats = deviceManager.GetDeviceStatistics();
                        }
                        
                        operationCount++;
                        
                        // 记录性能快照
                        if (operationCount % 10 == 0) // 每10次操作记录一次
                        {
                            performanceSnapshots.Add(_performanceCounters.TakeSnapshot());
                        }
                    }
                    catch
                    {
                        errorCount++;
                    }
                    
                    await Task.Delay(operationInterval);
                }
                
                stopwatch.Stop();
                
                var avgMemory = performanceSnapshots.Count > 0 ? performanceSnapshots.Average(s => s.TotalMemoryMB) : 0;
                var memoryStability = performanceSnapshots.Count > 1 ? 
                    100 - Math.Min(100, (performanceSnapshots.Max(s => s.TotalMemoryMB) - performanceSnapshots.Min(s => s.TotalMemoryMB)) / avgMemory * 100) : 100;

                return new PerformanceMetrics
                {
                    ThroughputPerSecond = operationCount * 1000.0 / stopwatch.ElapsedMilliseconds,
                    ErrorRate = (double)errorCount / operationCount * 100,
                    MemoryUsageMB = avgMemory,
                    ResourceUtilization = memoryStability,
                    ConcurrentOperations = 1
                };
            },
            performanceRequirement: metrics => metrics.ErrorRate < 1 && metrics.ResourceUtilization > 95);
        }

        #endregion

        #region 资源清理性能测试

        /// <summary>
        /// 运行资源清理性能测试
        /// </summary>
        private async Task RunResourceCleanupPerformanceTestsAsync()
        {
            TestProgress?.Invoke(this, "执行资源清理性能测试...");

            // 测试资源清理效率
            await RunPerformanceTestAsync("资源清理效率测试", "资源管理", async () =>
            {
                var deviceManager = CompositeDeviceManager.Instance;
                var createdDevices = new List<string>();
                
                // 创建大量资源
                for (int i = 0; i < 50; i++)
                {
                    var deviceId = $"CLEANUP_TEST_DEVICE_{i:D2}";
                    var deviceType = (CompositeDeviceType)(i % 6);
                    
                    var result = await deviceManager.CreateDeviceAsync(deviceType, deviceId, $"清理测试设备{i}");
                    if (result.Success)
                    {
                        createdDevices.Add(deviceId);
                        
                        // 添加点位
                        var device = deviceManager.GetDevice(deviceId);
                        if (device != null)
                        {
                            for (int j = 0; j < 10; j++)
                            {
                                device.AddPoint(new Point
                                {
                                    Id = $"CLEANUP_POINT_{i}_{j}",
                                    Name = $"CleanupPoint{i}_{j}",
                                    Type = new[] { "AI", "AO", "DI", "DO" }[j % 4],
                                    HMITagName = $"CLEANUP_TAG_{i}_{j}"
                                });
                            }
                        }
                    }
                }
                
                var beforeCleanupSnapshot = _performanceCounters.TakeSnapshot();
                
                // 清理资源
                var cleanupStopwatch = Stopwatch.StartNew();
                
                foreach (var deviceId in createdDevices)
                {
                    await deviceManager.RemoveDeviceAsync(deviceId);
                }
                
                // 强制垃圾回收
                GC.Collect();
                GC.WaitForPendingFinalizers();
                GC.Collect();
                
                cleanupStopwatch.Stop();
                
                var afterCleanupSnapshot = _performanceCounters.TakeSnapshot();
                
                var memoryReclaimed = beforeCleanupSnapshot.TotalMemoryMB - afterCleanupSnapshot.TotalMemoryMB;
                var cleanupEfficiency = Math.Max(0, memoryReclaimed / beforeCleanupSnapshot.TotalMemoryMB * 100);

                return new PerformanceMetrics
                {
                    AverageResponseTime = cleanupStopwatch.ElapsedMilliseconds / (double)createdDevices.Count,
                    ThroughputPerSecond = createdDevices.Count * 1000.0 / cleanupStopwatch.ElapsedMilliseconds,
                    MemoryUsageMB = memoryReclaimed,
                    ResourceUtilization = cleanupEfficiency,
                    ErrorRate = 0 // 简化处理
                };
            },
            performanceRequirement: metrics => metrics.ResourceUtilization > 70 && metrics.AverageResponseTime < 200);
        }

        #endregion

        #region 辅助方法

        /// <summary>
        /// 运行单个性能测试
        /// </summary>
        private async Task RunPerformanceTestAsync(
            string testName,
            string testCategory,
            Func<Task<PerformanceMetrics>> testAction,
            Func<PerformanceMetrics, bool>? performanceRequirement = null)
        {
            var stopwatch = Stopwatch.StartNew();
            var result = new PerformanceTestResult
            {
                TestName = testName,
                TestCategory = testCategory
            };

            try
            {
                TestProgress?.Invoke(this, $"执行性能测试: {testName}");

                result.Metrics = await testAction();
                
                // 检查性能要求
                if (performanceRequirement != null)
                {
                    result.Success = performanceRequirement(result.Metrics);
                    result.Message = result.Success ? "性能测试通过" : "性能测试未达到要求";
                }
                else
                {
                    result.Success = true;
                    result.Message = "性能测试完成";
                }

                // 添加详细数据
                result.Data = new Dictionary<string, object>
                {
                    ["吞吐量(ops/sec)"] = result.Metrics.ThroughputPerSecond,
                    ["平均响应时间(ms)"] = result.Metrics.AverageResponseTime,
                    ["最大响应时间(ms)"] = result.Metrics.MaxResponseTime,
                    ["并发操作数"] = result.Metrics.ConcurrentOperations,
                    ["错误率(%)"] = result.Metrics.ErrorRate,
                    ["内存使用(MB)"] = result.Metrics.MemoryUsageMB,
                    ["资源利用率(%)"] = result.Metrics.ResourceUtilization
                };
            }
            catch (Exception ex)
            {
                result.Success = false;
                result.Message = $"性能测试执行失败: {ex.Message}";
                result.Exception = ex;
            }
            finally
            {
                stopwatch.Stop();
                result.Duration = stopwatch.Elapsed;

                _testResults.Add(result);
                TestCompleted?.Invoke(this, result);

                var statusText = result.Success ? "通过" : "失败";
                TestProgress?.Invoke(this, $"性能测试完成: {testName} - {statusText}");
            }
        }

        /// <summary>
        /// 生成测试点位
        /// </summary>
        private List<AutomaticGeneration_ST.Models.Point> GenerateTestPoints(int count)
        {
            var points = new List<AutomaticGeneration_ST.Models.Point>();
            var types = new[] { "AI", "AO", "DI", "DO" };

            for (int i = 0; i < count; i++)
            {
                points.Add(new AutomaticGeneration_ST.Models.Point
                {
                    Id = $"TEST_POINT_{i:D4}",
                    Name = $"TestPoint{i}",
                    Type = types[i % types.Length],
                    HMITagName = $"TEST_TAG_{i:D4}",
                    Description = $"测试点位{i}",
                    Unit = i % 2 == 0 ? "℃" : ""
                });
            }

            return points;
        }

        /// <summary>
        /// 测量模板渲染时间
        /// </summary>
        private async Task<double> MeasureRenderTime(TemplateManager templateManager, AutomaticGeneration_ST.Models.Point testPoint)
        {
            var stopwatch = Stopwatch.StartNew();
            await templateManager.RenderTemplateAsync(testPoint.Type, testPoint);
            stopwatch.Stop();
            return stopwatch.Elapsed.TotalMilliseconds;
        }

        /// <summary>
        /// 计算百分位数
        /// </summary>
        private double CalculatePercentile(List<double> values, double percentile)
        {
            if (!values.Any()) return 0;
            
            var sortedValues = values.OrderBy(v => v).ToList();
            var index = (int)Math.Ceiling(percentile * sortedValues.Count) - 1;
            index = Math.Max(0, Math.Min(sortedValues.Count - 1, index));
            
            return sortedValues[index];
        }

        /// <summary>
        /// 计算整体性能指标
        /// </summary>
        private PerformanceMetrics CalculateOverallMetrics()
        {
            if (!_testResults.Any()) return new PerformanceMetrics();

            var successfulTests = _testResults.Where(r => r.Success).ToList();
            if (!successfulTests.Any()) return new PerformanceMetrics();

            return new PerformanceMetrics
            {
                AverageResponseTime = successfulTests.Average(r => r.Metrics.AverageResponseTime),
                ThroughputPerSecond = successfulTests.Average(r => r.Metrics.ThroughputPerSecond),
                ErrorRate = _testResults.Count(r => !r.Success) * 100.0 / _testResults.Count,
                MemoryUsageMB = successfulTests.Average(r => r.Metrics.MemoryUsageMB),
                ResourceUtilization = successfulTests.Average(r => r.Metrics.ResourceUtilization),
                ConcurrentOperations = (int)successfulTests.Average(r => r.Metrics.ConcurrentOperations)
            };
        }

        /// <summary>
        /// 评估性能要求
        /// </summary>
        private bool EvaluatePerformanceRequirements(PerformanceSuiteResult suiteResult)
        {
            var requirements = new[]
            {
                suiteResult.SuccessRate >= 90,           // 90%以上测试通过
                suiteResult.OverallMetrics.ErrorRate < 5, // 错误率低于5%
                suiteResult.OverallMetrics.ThroughputPerSecond > 10, // 吞吐量大于10 ops/sec
                suiteResult.OverallMetrics.AverageResponseTime < 1000 // 平均响应时间小于1秒
            };

            return requirements.All(req => req);
        }

        /// <summary>
        /// 生成性能测试报告
        /// </summary>
        public string GeneratePerformanceReport(PerformanceSuiteResult suiteResult)
        {
            var sb = new StringBuilder();

            sb.AppendLine("========================================");
            sb.AppendLine("ST自动生成器系统性能测试报告");
            sb.AppendLine("========================================");
            sb.AppendLine($"测试时间: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
            sb.AppendLine($"测试套件: {suiteResult.SuiteName}");
            sb.AppendLine($"总测试数: {suiteResult.TotalTests}");
            sb.AppendLine($"通过测试: {suiteResult.PassedTests}");
            sb.AppendLine($"失败测试: {suiteResult.FailedTests}");
            sb.AppendLine($"成功率: {suiteResult.SuccessRate:F1}%");
            sb.AppendLine($"总耗时: {suiteResult.TotalDuration.TotalSeconds:F2}秒");
            sb.AppendLine($"性能要求达成: {(suiteResult.MeetsPerformanceRequirements ? "是" : "否")}");
            sb.AppendLine();

            // 整体性能指标
            sb.AppendLine("整体性能指标:");
            sb.AppendLine("----------------------------------------");
            sb.AppendLine($"平均吞吐量: {suiteResult.OverallMetrics.ThroughputPerSecond:F2} ops/sec");
            sb.AppendLine($"平均响应时间: {suiteResult.OverallMetrics.AverageResponseTime:F2} ms");
            sb.AppendLine($"错误率: {suiteResult.OverallMetrics.ErrorRate:F2}%");
            sb.AppendLine($"平均内存使用: {suiteResult.OverallMetrics.MemoryUsageMB:F2} MB");
            sb.AppendLine($"资源利用率: {suiteResult.OverallMetrics.ResourceUtilization:F2}%");
            sb.AppendLine();

            // 按类别统计
            var categoryResults = suiteResult.Results.GroupBy(r => r.TestCategory).ToList();
            sb.AppendLine("分类测试结果:");
            sb.AppendLine("----------------------------------------");
            foreach (var category in categoryResults)
            {
                var total = category.Count();
                var passed = category.Count(r => r.Success);
                var avgThroughput = category.Where(r => r.Success).Average(r => r.Metrics.ThroughputPerSecond);
                var avgResponseTime = category.Where(r => r.Success).Average(r => r.Metrics.AverageResponseTime);

                sb.AppendLine($"{category.Key}: {passed}/{total} ({(double)passed/total*100:F1}%)");
                sb.AppendLine($"  平均吞吐量: {avgThroughput:F2} ops/sec");
                sb.AppendLine($"  平均响应时间: {avgResponseTime:F2} ms");
                sb.AppendLine();
            }

            // 详细测试结果
            sb.AppendLine("详细测试结果:");
            sb.AppendLine("----------------------------------------");
            foreach (var result in suiteResult.Results)
            {
                var status = result.Success ? "通过" : "失败";
                sb.AppendLine($"[{status}] {result.TestName}");
                sb.AppendLine($"  类别: {result.TestCategory}");
                sb.AppendLine($"  耗时: {result.Duration.TotalMilliseconds:F0}ms");
                sb.AppendLine($"  吞吐量: {result.Metrics.ThroughputPerSecond:F2} ops/sec");
                sb.AppendLine($"  响应时间: {result.Metrics.AverageResponseTime:F2}ms");
                sb.AppendLine($"  消息: {result.Message}");
                sb.AppendLine();
            }

            return sb.ToString();
        }

        #endregion

        #region 资源释放

        /// <summary>
        /// 释放资源
        /// </summary>
        public void Dispose()
        {
            _cancellationTokenSource?.Cancel();
            _cancellationTokenSource?.Dispose();
            _performanceCounters?.Dispose();
            _testResults.Clear();
        }

        #endregion
    }
}