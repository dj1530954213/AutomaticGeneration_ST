using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Text;
using System.Diagnostics;
using System.Linq;

namespace WinFormsApp1.Tests
{
    /// <summary>
    /// 测试运行器 - 统一管理和执行所有测试
    /// </summary>
    public class TestRunner
    {
        #region 私有字段

        private readonly List<ITestSuite> _testSuites = new();
        private readonly Dictionary<string, object> _globalTestContext = new();
        private readonly StringBuilder _executionLog = new();
        private string _reportOutputDirectory = "TestReports";

        #endregion

        #region 测试套件接口

        /// <summary>
        /// 测试套件接口
        /// </summary>
        public interface ITestSuite
        {
            string SuiteName { get; }
            string Description { get; }
            bool IsEnabled { get; set; }
            Task<SystemFunctionalTests.TestSuiteResult> RunTestsAsync();
        }

        #endregion

        #region 测试套件实现

        /// <summary>
        /// 系统功能测试套件
        /// </summary>
        public class FunctionalTestSuite : ITestSuite
        {
            public string SuiteName => "系统功能测试";
            public string Description => "ST自动生成器核心功能完整性测试";
            public bool IsEnabled { get; set; } = true;

            public async Task<SystemFunctionalTests.TestSuiteResult> RunTestsAsync()
            {
                var functionalTests = new SystemFunctionalTests();
                return await functionalTests.RunComprehensiveFunctionalTestsAsync();
            }
        }

        /// <summary>
        /// 组合设备系统测试套件
        /// </summary>
        public class CompositeDeviceTestSuite : ITestSuite
        {
            public string SuiteName => "组合设备系统测试";
            public string Description => "组合设备管理和集成功能测试";
            public bool IsEnabled { get; set; } = true;

            public async Task<SystemFunctionalTests.TestSuiteResult> RunTestsAsync()
            {
                var deviceTests = new CompositeDeviceSystemTests();
                var result = await deviceTests.RunFullTestSuiteAsync();
                
                // 转换结果格式
                return new SystemFunctionalTests.TestSuiteResult
                {
                    SuiteName = SuiteName,
                    TotalTests = result.TotalTests,
                    PassedTests = result.PassedTests,
                    FailedTests = result.FailedTests,
                    TotalDuration = result.TotalDuration,
                    Results = result.Results.Select(r => new SystemFunctionalTests.TestResult
                    {
                        TestSuite = SuiteName,
                        TestName = r.TestName,
                        Success = r.Success,
                        Message = r.Message,
                        Duration = r.Duration,
                        Data = r.Data,
                        Exception = r.Exception,
                        Timestamp = r.Timestamp
                    }).ToList()
                };
            }
        }

        #endregion

        #region 事件定义

        /// <summary>
        /// 测试执行进度事件
        /// </summary>
        public event EventHandler<TestProgressEventArgs>? TestProgress;

        /// <summary>
        /// 测试套件完成事件
        /// </summary>
        public event EventHandler<TestSuiteCompletedEventArgs>? TestSuiteCompleted;

        /// <summary>
        /// 全部测试完成事件
        /// </summary>
        public event EventHandler<AllTestsCompletedEventArgs>? AllTestsCompleted;

        #endregion

        #region 事件参数类

        /// <summary>
        /// 测试进度事件参数
        /// </summary>
        public class TestProgressEventArgs : EventArgs
        {
            public string SuiteName { get; set; } = "";
            public string CurrentTest { get; set; } = "";
            public int CompletedTests { get; set; }
            public int TotalTests { get; set; }
            public double ProgressPercentage => TotalTests > 0 ? (double)CompletedTests / TotalTests * 100 : 0;
        }

        /// <summary>
        /// 测试套件完成事件参数
        /// </summary>
        public class TestSuiteCompletedEventArgs : EventArgs
        {
            public SystemFunctionalTests.TestSuiteResult Result { get; set; } = new();
            public TimeSpan Duration { get; set; }
        }

        /// <summary>
        /// 全部测试完成事件参数
        /// </summary>
        public class AllTestsCompletedEventArgs : EventArgs
        {
            public List<SystemFunctionalTests.TestSuiteResult> Results { get; set; } = new();
            public TimeSpan TotalDuration { get; set; }
            public int TotalTests { get; set; }
            public int TotalPassed { get; set; }
            public int TotalFailed { get; set; }
            public double OverallSuccessRate => TotalTests > 0 ? (double)TotalPassed / TotalTests * 100 : 0;
            public bool HasCriticalFailures { get; set; }
        }

        #endregion

        #region 构造函数

        public TestRunner()
        {
            InitializeTestSuites();
            EnsureReportDirectory();
        }

        #endregion

        #region 初始化方法

        /// <summary>
        /// 初始化测试套件
        /// </summary>
        private void InitializeTestSuites()
        {
            // 注册所有测试套件
            _testSuites.Add(new FunctionalTestSuite());
            _testSuites.Add(new CompositeDeviceTestSuite());
            
            LogMessage("测试运行器初始化完成");
            LogMessage($"已注册 {_testSuites.Count} 个测试套件");
        }

        /// <summary>
        /// 确保报告目录存在
        /// </summary>
        private void EnsureReportDirectory()
        {
            if (!Directory.Exists(_reportOutputDirectory))
            {
                Directory.CreateDirectory(_reportOutputDirectory);
            }
        }

        #endregion

        #region 公共属性

        /// <summary>
        /// 测试套件列表
        /// </summary>
        public IReadOnlyList<ITestSuite> TestSuites => _testSuites;

        /// <summary>
        /// 报告输出目录
        /// </summary>
        public string ReportOutputDirectory
        {
            get => _reportOutputDirectory;
            set
            {
                _reportOutputDirectory = value;
                EnsureReportDirectory();
            }
        }

        #endregion

        #region 主要测试执行方法

        /// <summary>
        /// 运行所有测试套件
        /// </summary>
        public async Task<AllTestsCompletedEventArgs> RunAllTestsAsync()
        {
            LogMessage("=== 开始执行所有测试套件 ===");
            var overallStopwatch = Stopwatch.StartNew();
            var allResults = new List<SystemFunctionalTests.TestSuiteResult>();

            var enabledSuites = _testSuites.Where(s => s.IsEnabled).ToList();
            LogMessage($"将执行 {enabledSuites.Count} 个已启用的测试套件");

            try
            {
                for (int i = 0; i < enabledSuites.Count; i++)
                {
                    var suite = enabledSuites[i];
                    LogMessage($"开始执行测试套件: {suite.SuiteName}");

                    // 通知进度
                    TestProgress?.Invoke(this, new TestProgressEventArgs
                    {
                        SuiteName = suite.SuiteName,
                        CurrentTest = "准备中...",
                        CompletedTests = i,
                        TotalTests = enabledSuites.Count
                    });

                    var suiteStopwatch = Stopwatch.StartNew();
                    SystemFunctionalTests.TestSuiteResult result;

                    try
                    {
                        result = await suite.RunTestsAsync();
                        suiteStopwatch.Stop();

                        LogMessage($"测试套件 {suite.SuiteName} 完成: {result.PassedTests}/{result.TotalTests} 通过");
                    }
                    catch (Exception ex)
                    {
                        suiteStopwatch.Stop();
                        LogMessage($"测试套件 {suite.SuiteName} 执行失败: {ex.Message}");

                        // 创建失败结果
                        result = new SystemFunctionalTests.TestSuiteResult
                        {
                            SuiteName = suite.SuiteName,
                            TotalTests = 1,
                            PassedTests = 0,
                            FailedTests = 1,
                            TotalDuration = suiteStopwatch.Elapsed,
                            Results = new List<SystemFunctionalTests.TestResult>
                            {
                                new SystemFunctionalTests.TestResult
                                {
                                    TestSuite = suite.SuiteName,
                                    TestName = "测试套件执行",
                                    Success = false,
                                    Message = $"测试套件执行失败: {ex.Message}",
                                    Exception = ex,
                                    Duration = suiteStopwatch.Elapsed,
                                    Severity = SystemFunctionalTests.TestSeverity.Critical
                                }
                            }
                        };
                    }

                    allResults.Add(result);

                    // 通知测试套件完成
                    TestSuiteCompleted?.Invoke(this, new TestSuiteCompletedEventArgs
                    {
                        Result = result,
                        Duration = suiteStopwatch.Elapsed
                    });

                    // 生成单个套件报告
                    await GenerateSuiteReportAsync(result);
                }

                overallStopwatch.Stop();

                // 汇总结果
                var completedEventArgs = new AllTestsCompletedEventArgs
                {
                    Results = allResults,
                    TotalDuration = overallStopwatch.Elapsed,
                    TotalTests = allResults.Sum(r => r.TotalTests),
                    TotalPassed = allResults.Sum(r => r.PassedTests),
                    TotalFailed = allResults.Sum(r => r.FailedTests),
                    HasCriticalFailures = allResults.Any(r => r.HasCriticalFailures)
                };

                LogMessage("=== 所有测试套件执行完成 ===");
                LogMessage($"总计: {completedEventArgs.TotalTests}, 通过: {completedEventArgs.TotalPassed}, 失败: {completedEventArgs.TotalFailed}");
                LogMessage($"整体成功率: {completedEventArgs.OverallSuccessRate:F1}%");
                LogMessage($"总耗时: {completedEventArgs.TotalDuration.TotalSeconds:F2}秒");

                // 生成综合报告
                await GenerateComprehensiveReportAsync(completedEventArgs);

                // 通知全部测试完成
                AllTestsCompleted?.Invoke(this, completedEventArgs);

                return completedEventArgs;
            }
            catch (Exception ex)
            {
                LogMessage($"测试执行过程中发生严重错误: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// 运行指定的测试套件
        /// </summary>
        public async Task<SystemFunctionalTests.TestSuiteResult> RunTestSuiteAsync(string suiteName)
        {
            var suite = _testSuites.FirstOrDefault(s => s.SuiteName == suiteName);
            if (suite == null)
            {
                throw new ArgumentException($"未找到测试套件: {suiteName}");
            }

            if (!suite.IsEnabled)
            {
                throw new InvalidOperationException($"测试套件 {suiteName} 已禁用");
            }

            LogMessage($"开始执行单个测试套件: {suiteName}");
            var stopwatch = Stopwatch.StartNew();

            var result = await suite.RunTestsAsync();
            stopwatch.Stop();

            LogMessage($"测试套件 {suiteName} 完成: {result.PassedTests}/{result.TotalTests} 通过, 耗时: {stopwatch.Elapsed.TotalSeconds:F2}秒");

            // 生成单个套件报告
            await GenerateSuiteReportAsync(result);

            return result;
        }

        /// <summary>
        /// 运行快速验证测试
        /// </summary>
        public async Task<QuickTestResult> RunQuickValidationTestsAsync()
        {
            LogMessage("开始执行快速验证测试");
            var stopwatch = Stopwatch.StartNew();

            var quickTests = new List<Func<Task<(string name, bool success, string message)>>>
            {
                // 核心组件快速检查
                async () =>
                {
                    try
                    {
                        var templateManager = Templates.TemplateManager.Instance;
                        var templates = templateManager.GetAvailableTemplates();
                        return ("模板管理器", templates.Any(), $"发现 {templates.Count} 个模板");
                    }
                    catch (Exception ex)
                    {
                        return ("模板管理器", false, $"初始化失败: {ex.Message}");
                    }
                },

                // 设备管理器快速检查
                async () =>
                {
                    try
                    {
                        var deviceManager = Devices.CompositeDeviceManager.Instance;
                        var isInitialized = deviceManager.IsInitialized;
                        return ("设备管理器", isInitialized, $"初始化状态: {isInitialized}");
                    }
                    catch (Exception ex)
                    {
                        return ("设备管理器", false, $"检查失败: {ex.Message}");
                    }
                },

                // 配置管理器快速检查
                async () =>
                {
                    try
                    {
                        var configManager = Config.ApplicationConfiguration.Instance;
                        var settings = configManager.GetCurrentSettings();
                        return ("配置管理器", settings != null, $"配置状态: {(settings != null ? "已加载" : "未加载")}");
                    }
                    catch (Exception ex)
                    {
                        return ("配置管理器", false, $"检查失败: {ex.Message}");
                    }
                },

                // 简单代码生成测试
                async () =>
                {
                    try
                    {
                        var templateManager = Templates.TemplateManager.Instance;
                        var testPoint = new AutomaticGeneration_ST.Models.Point
                        {
                            Id = "QUICK_TEST",
                            Name = "QuickTest",
                            Type = "AI",
                            HMITagName = "QUICK_TAG"
                        };
                        var code = await templateManager.RenderTemplateAsync("AI", testPoint);
                        var success = !string.IsNullOrEmpty(code) && code.Contains("QUICK_TAG");
                        return ("代码生成", success, $"生成状态: {(success ? "成功" : "失败")}");
                    }
                    catch (Exception ex)
                    {
                        return ("代码生成", false, $"生成失败: {ex.Message}");
                    }
                }
            };

            var results = new List<(string name, bool success, string message)>();

            foreach (var test in quickTests)
            {
                try
                {
                    var result = await test();
                    results.Add(result);
                    LogMessage($"快速测试 - {result.name}: {(result.success ? "通过" : "失败")} - {result.message}");
                }
                catch (Exception ex)
                {
                    results.Add(("未知测试", false, $"执行异常: {ex.Message}"));
                }
            }

            stopwatch.Stop();

            var quickResult = new QuickTestResult
            {
                TotalTests = results.Count,
                PassedTests = results.Count(r => r.success),
                FailedTests = results.Count(r => !r.success),
                Duration = stopwatch.Elapsed,
                Results = results,
                OverallSuccess = results.All(r => r.success)
            };

            LogMessage($"快速验证测试完成: {quickResult.PassedTests}/{quickResult.TotalTests} 通过, 耗时: {quickResult.Duration.TotalMilliseconds:F0}ms");

            return quickResult;
        }

        #endregion

        #region 快速测试结果类

        /// <summary>
        /// 快速测试结果
        /// </summary>
        public class QuickTestResult
        {
            public int TotalTests { get; set; }
            public int PassedTests { get; set; }
            public int FailedTests { get; set; }
            public TimeSpan Duration { get; set; }
            public List<(string name, bool success, string message)> Results { get; set; } = new();
            public bool OverallSuccess { get; set; }
            public double SuccessRate => TotalTests > 0 ? (double)PassedTests / TotalTests * 100 : 0;
        }

        #endregion

        #region 报告生成方法

        /// <summary>
        /// 生成单个测试套件报告
        /// </summary>
        private async Task GenerateSuiteReportAsync(SystemFunctionalTests.TestSuiteResult result)
        {
            try
            {
                var timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
                var fileName = $"{result.SuiteName.Replace(" ", "_")}_{timestamp}.html";
                var filePath = Path.Combine(_reportOutputDirectory, fileName);

                var htmlContent = GenerateHtmlReport(result);
                await File.WriteAllTextAsync(filePath, htmlContent, Encoding.UTF8);

                LogMessage($"测试套件报告已生成: {filePath}");
            }
            catch (Exception ex)
            {
                LogMessage($"生成测试套件报告失败: {ex.Message}");
            }
        }

        /// <summary>
        /// 生成综合测试报告
        /// </summary>
        private async Task GenerateComprehensiveReportAsync(AllTestsCompletedEventArgs results)
        {
            try
            {
                var timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
                
                // 生成HTML报告
                var htmlFileName = $"Comprehensive_Test_Report_{timestamp}.html";
                var htmlFilePath = Path.Combine(_reportOutputDirectory, htmlFileName);
                var htmlContent = GenerateComprehensiveHtmlReport(results);
                await File.WriteAllTextAsync(htmlFilePath, htmlContent, Encoding.UTF8);

                // 生成文本报告
                var textFileName = $"Comprehensive_Test_Report_{timestamp}.txt";
                var textFilePath = Path.Combine(_reportOutputDirectory, textFileName);
                var textContent = GenerateComprehensiveTextReport(results);
                await File.WriteAllTextAsync(textFilePath, textContent, Encoding.UTF8);

                // 生成JSON报告（用于程序处理）
                var jsonFileName = $"Comprehensive_Test_Report_{timestamp}.json";
                var jsonFilePath = Path.Combine(_reportOutputDirectory, jsonFileName);
                var jsonContent = Newtonsoft.Json.JsonConvert.SerializeObject(results, Newtonsoft.Json.Formatting.Indented);
                await File.WriteAllTextAsync(jsonFilePath, jsonContent, Encoding.UTF8);

                LogMessage($"综合测试报告已生成:");
                LogMessage($"  HTML报告: {htmlFilePath}");
                LogMessage($"  文本报告: {textFilePath}");
                LogMessage($"  JSON报告: {jsonFilePath}");
            }
            catch (Exception ex)
            {
                LogMessage($"生成综合测试报告失败: {ex.Message}");
            }
        }

        /// <summary>
        /// 生成HTML格式的单个测试套件报告
        /// </summary>
        private string GenerateHtmlReport(SystemFunctionalTests.TestSuiteResult result)
        {
            var sb = new StringBuilder();
            
            sb.AppendLine("<!DOCTYPE html>");
            sb.AppendLine("<html lang='zh-CN'>");
            sb.AppendLine("<head>");
            sb.AppendLine("    <meta charset='UTF-8'>");
            sb.AppendLine("    <meta name='viewport' content='width=device-width, initial-scale=1.0'>");
            sb.AppendLine($"    <title>{result.SuiteName} - 测试报告</title>");
            sb.AppendLine("    <style>");
            sb.AppendLine("        body { font-family: 'Microsoft YaHei', Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }");
            sb.AppendLine("        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }");
            sb.AppendLine("        h1 { color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }");
            sb.AppendLine("        h2 { color: #34495e; margin-top: 30px; }");
            sb.AppendLine("        .summary { display: flex; justify-content: space-around; margin: 20px 0; }");
            sb.AppendLine("        .summary-item { text-align: center; padding: 15px; background: #ecf0f1; border-radius: 5px; }");
            sb.AppendLine("        .summary-item h3 { margin: 0; font-size: 24px; }");
            sb.AppendLine("        .summary-item p { margin: 5px 0 0; color: #7f8c8d; }");
            sb.AppendLine("        .test-pass { color: #27ae60; }");
            sb.AppendLine("        .test-fail { color: #e74c3c; }");
            sb.AppendLine("        .test-critical { color: #e74c3c; font-weight: bold; }");
            sb.AppendLine("        table { width: 100%; border-collapse: collapse; margin: 20px 0; }");
            sb.AppendLine("        th, td { border: 1px solid #bdc3c7; padding: 10px; text-align: left; }");
            sb.AppendLine("        th { background-color: #34495e; color: white; }");
            sb.AppendLine("        tr:nth-child(even) { background-color: #f8f9fa; }");
            sb.AppendLine("        .progress-bar { width: 100%; background-color: #ecf0f1; border-radius: 10px; overflow: hidden; }");
            sb.AppendLine("        .progress-fill { height: 20px; background-color: #3498db; transition: width 0.3s ease; }");
            sb.AppendLine("        .details { margin-top: 10px; padding: 10px; background: #f8f9fa; border-left: 4px solid #3498db; }");
            sb.AppendLine("    </style>");
            sb.AppendLine("</head>");
            sb.AppendLine("<body>");
            sb.AppendLine("    <div class='container'>");
            
            // 标题和基本信息
            sb.AppendLine($"        <h1>{result.SuiteName} - 测试报告</h1>");
            sb.AppendLine($"        <p><strong>生成时间:</strong> {DateTime.Now:yyyy-MM-dd HH:mm:ss}</p>");
            sb.AppendLine($"        <p><strong>执行时长:</strong> {result.TotalDuration.TotalSeconds:F2} 秒</p>");
            
            // 摘要统计
            sb.AppendLine("        <div class='summary'>");
            sb.AppendLine($"            <div class='summary-item'>");
            sb.AppendLine($"                <h3>{result.TotalTests}</h3>");
            sb.AppendLine($"                <p>总测试数</p>");
            sb.AppendLine($"            </div>");
            sb.AppendLine($"            <div class='summary-item'>");
            sb.AppendLine($"                <h3 class='test-pass'>{result.PassedTests}</h3>");
            sb.AppendLine($"                <p>通过测试</p>");
            sb.AppendLine($"            </div>");
            sb.AppendLine($"            <div class='summary-item'>");
            sb.AppendLine($"                <h3 class='test-fail'>{result.FailedTests}</h3>");
            sb.AppendLine($"                <p>失败测试</p>");
            sb.AppendLine($"            </div>");
            sb.AppendLine($"            <div class='summary-item'>");
            sb.AppendLine($"                <h3>{result.SuccessRate:F1}%</h3>");
            sb.AppendLine($"                <p>成功率</p>");
            sb.AppendLine($"            </div>");
            sb.AppendLine("        </div>");
            
            // 进度条
            sb.AppendLine("        <div class='progress-bar'>");
            sb.AppendLine($"            <div class='progress-fill' style='width: {result.SuccessRate}%'></div>");
            sb.AppendLine("        </div>");
            
            // 详细测试结果
            sb.AppendLine("        <h2>详细测试结果</h2>");
            sb.AppendLine("        <table>");
            sb.AppendLine("            <thead>");
            sb.AppendLine("                <tr>");
            sb.AppendLine("                    <th>测试套件</th>");
            sb.AppendLine("                    <th>测试名称</th>");
            sb.AppendLine("                    <th>结果</th>");
            sb.AppendLine("                    <th>耗时(ms)</th>");
            sb.AppendLine("                    <th>消息</th>");
            sb.AppendLine("                </tr>");
            sb.AppendLine("            </thead>");
            sb.AppendLine("            <tbody>");
            
            foreach (var test in result.Results)
            {
                var statusClass = test.Success ? "test-pass" : (test.Severity == SystemFunctionalTests.TestSeverity.Critical ? "test-critical" : "test-fail");
                var statusText = test.Success ? "通过" : "失败";
                
                sb.AppendLine("                <tr>");
                sb.AppendLine($"                    <td>{test.TestSuite}</td>");
                sb.AppendLine($"                    <td>{test.TestName}</td>");
                sb.AppendLine($"                    <td class='{statusClass}'>{statusText}</td>");
                sb.AppendLine($"                    <td>{test.Duration.TotalMilliseconds:F0}</td>");
                sb.AppendLine($"                    <td>{test.Message}</td>");
                sb.AppendLine("                </tr>");
                
                // 如果有详细数据，添加详情行
                if (test.Data.Any())
                {
                    sb.AppendLine("                <tr>");
                    sb.AppendLine("                    <td colspan='5'>");
                    sb.AppendLine("                        <div class='details'>");
                    sb.AppendLine("                            <strong>测试数据:</strong><br>");
                    foreach (var kvp in test.Data.Take(10)) // 限制显示前10个数据
                    {
                        sb.AppendLine($"                            {kvp.Key}: {kvp.Value}<br>");
                    }
                    sb.AppendLine("                        </div>");
                    sb.AppendLine("                    </td>");
                    sb.AppendLine("                </tr>");
                }
            }
            
            sb.AppendLine("            </tbody>");
            sb.AppendLine("        </table>");
            
            sb.AppendLine("    </div>");
            sb.AppendLine("</body>");
            sb.AppendLine("</html>");
            
            return sb.ToString();
        }

        /// <summary>
        /// 生成综合HTML报告
        /// </summary>
        private string GenerateComprehensiveHtmlReport(AllTestsCompletedEventArgs results)
        {
            var sb = new StringBuilder();
            
            sb.AppendLine("<!DOCTYPE html>");
            sb.AppendLine("<html lang='zh-CN'>");
            sb.AppendLine("<head>");
            sb.AppendLine("    <meta charset='UTF-8'>");
            sb.AppendLine("    <meta name='viewport' content='width=device-width, initial-scale=1.0'>");
            sb.AppendLine("    <title>ST自动生成器 - 综合测试报告</title>");
            sb.AppendLine("    <style>");
            // CSS样式（简化版本）
            sb.AppendLine("        body { font-family: 'Microsoft YaHei', Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }");
            sb.AppendLine("        .container { max-width: 1400px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }");
            sb.AppendLine("        h1 { color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 15px; text-align: center; }");
            sb.AppendLine("        .overall-summary { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 30px 0; }");
            sb.AppendLine("        .summary-card { padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 10px; text-align: center; }");
            sb.AppendLine("        .summary-card h3 { margin: 0; font-size: 28px; }");
            sb.AppendLine("        .summary-card p { margin: 10px 0 0; opacity: 0.9; }");
            sb.AppendLine("        .suite-summary { margin: 30px 0; }");
            sb.AppendLine("        .suite-card { background: #f8f9fa; border-left: 5px solid #3498db; padding: 15px; margin: 10px 0; border-radius: 5px; }");
            sb.AppendLine("        .suite-card.failed { border-left-color: #e74c3c; }");
            sb.AppendLine("        .progress-container { margin: 20px 0; }");
            sb.AppendLine("        .progress-bar { width: 100%; height: 25px; background-color: #ecf0f1; border-radius: 12px; overflow: hidden; position: relative; }");
            sb.AppendLine("        .progress-fill { height: 100%; background: linear-gradient(90deg, #56ab2f 0%, #a8e6cf 100%); transition: width 0.5s ease; }");
            sb.AppendLine("        .progress-text { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-weight: bold; color: #2c3e50; }");
            sb.AppendLine("    </style>");
            sb.AppendLine("</head>");
            sb.AppendLine("<body>");
            sb.AppendLine("    <div class='container'>");
            
            // 主标题
            sb.AppendLine("        <h1>ST自动生成器系统 - 综合测试报告</h1>");
            sb.AppendLine($"        <p style='text-align: center; color: #7f8c8d; font-size: 16px;'>生成时间: {DateTime.Now:yyyy-MM-dd HH:mm:ss} | 总执行时长: {results.TotalDuration.TotalSeconds:F2} 秒</p>");
            
            // 整体统计
            sb.AppendLine("        <div class='overall-summary'>");
            sb.AppendLine("            <div class='summary-card'>");
            sb.AppendLine($"                <h3>{results.Results.Count}</h3>");
            sb.AppendLine("                <p>测试套件</p>");
            sb.AppendLine("            </div>");
            sb.AppendLine("            <div class='summary-card'>");
            sb.AppendLine($"                <h3>{results.TotalTests}</h3>");
            sb.AppendLine("                <p>总测试数</p>");
            sb.AppendLine("            </div>");
            sb.AppendLine("            <div class='summary-card'>");
            sb.AppendLine($"                <h3>{results.TotalPassed}</h3>");
            sb.AppendLine("                <p>通过测试</p>");
            sb.AppendLine("            </div>");
            sb.AppendLine("            <div class='summary-card'>");
            sb.AppendLine($"                <h3>{results.TotalFailed}</h3>");
            sb.AppendLine("                <p>失败测试</p>");
            sb.AppendLine("            </div>");
            sb.AppendLine("            <div class='summary-card'>");
            sb.AppendLine($"                <h3>{results.OverallSuccessRate:F1}%</h3>");
            sb.AppendLine("                <p>整体成功率</p>");
            sb.AppendLine("            </div>");
            sb.AppendLine("        </div>");
            
            // 整体进度条
            sb.AppendLine("        <div class='progress-container'>");
            sb.AppendLine("            <h3>整体测试进度</h3>");
            sb.AppendLine("            <div class='progress-bar'>");
            sb.AppendLine($"                <div class='progress-fill' style='width: {results.OverallSuccessRate}%'></div>");
            sb.AppendLine($"                <div class='progress-text'>{results.TotalPassed}/{results.TotalTests} 通过 ({results.OverallSuccessRate:F1}%)</div>");
            sb.AppendLine("            </div>");
            sb.AppendLine("        </div>");
            
            // 各测试套件详情
            sb.AppendLine("        <div class='suite-summary'>");
            sb.AppendLine("            <h2>测试套件详情</h2>");
            
            foreach (var suite in results.Results)
            {
                var cardClass = suite.SuccessRate < 100 ? "suite-card failed" : "suite-card";
                sb.AppendLine($"            <div class='{cardClass}'>");
                sb.AppendLine($"                <h4>{suite.SuiteName}</h4>");
                sb.AppendLine($"                <p><strong>测试结果:</strong> {suite.PassedTests}/{suite.TotalTests} 通过 ({suite.SuccessRate:F1}%)</p>");
                sb.AppendLine($"                <p><strong>执行时长:</strong> {suite.TotalDuration.TotalSeconds:F2} 秒</p>");
                
                if (suite.FailedTests > 0)
                {
                    sb.AppendLine("                <p><strong>失败测试:</strong></p>");
                    sb.AppendLine("                <ul>");
                    foreach (var failedTest in suite.Results.Where(r => !r.Success).Take(5))
                    {
                        sb.AppendLine($"                    <li>{failedTest.TestName}: {failedTest.Message}</li>");
                    }
                    if (suite.Results.Count(r => !r.Success) > 5)
                    {
                        sb.AppendLine($"                    <li>... 还有 {suite.Results.Count(r => !r.Success) - 5} 个失败测试</li>");
                    }
                    sb.AppendLine("                </ul>");
                }
                
                sb.AppendLine("            </div>");
            }
            
            sb.AppendLine("        </div>");
            
            // 关键失败提醒
            if (results.HasCriticalFailures)
            {
                sb.AppendLine("        <div style='background: #ffebee; border: 2px solid #f44336; padding: 20px; margin: 20px 0; border-radius: 5px;'>");
                sb.AppendLine("            <h3 style='color: #d32f2f; margin-top: 0;'>⚠️ 发现关键失败</h3>");
                sb.AppendLine("            <p>系统检测到一些关键功能测试失败，请优先处理这些问题以确保系统稳定性。</p>");
                sb.AppendLine("        </div>");
            }
            
            sb.AppendLine("    </div>");
            sb.AppendLine("</body>");
            sb.AppendLine("</html>");
            
            return sb.ToString();
        }

        /// <summary>
        /// 生成综合文本报告
        /// </summary>
        private string GenerateComprehensiveTextReport(AllTestsCompletedEventArgs results)
        {
            var sb = new StringBuilder();
            
            sb.AppendLine("========================================");
            sb.AppendLine("ST自动生成器系统 - 综合测试报告");
            sb.AppendLine("========================================");
            sb.AppendLine($"生成时间: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
            sb.AppendLine($"总执行时长: {results.TotalDuration.TotalSeconds:F2} 秒");
            sb.AppendLine();
            
            // 整体统计
            sb.AppendLine("整体统计:");
            sb.AppendLine("----------------------------------------");
            sb.AppendLine($"测试套件数量: {results.Results.Count}");
            sb.AppendLine($"总测试数量: {results.TotalTests}");
            sb.AppendLine($"通过测试: {results.TotalPassed}");
            sb.AppendLine($"失败测试: {results.TotalFailed}");
            sb.AppendLine($"整体成功率: {results.OverallSuccessRate:F1}%");
            sb.AppendLine($"关键失败: {(results.HasCriticalFailures ? "是" : "否")}");
            sb.AppendLine();
            
            // 各测试套件详情
            sb.AppendLine("测试套件详情:");
            sb.AppendLine("----------------------------------------");
            foreach (var suite in results.Results)
            {
                sb.AppendLine($"\n[{suite.SuiteName}]");
                sb.AppendLine($"  测试结果: {suite.PassedTests}/{suite.TotalTests} ({suite.SuccessRate:F1}%)");
                sb.AppendLine($"  执行时长: {suite.TotalDuration.TotalSeconds:F2} 秒");
                sb.AppendLine($"  失败测试: {suite.FailedTests}");
                
                if (suite.FailedTests > 0)
                {
                    sb.AppendLine("  失败详情:");
                    foreach (var failedTest in suite.Results.Where(r => !r.Success).Take(3))
                    {
                        sb.AppendLine($"    - {failedTest.TestName}: {failedTest.Message}");
                    }
                    if (suite.Results.Count(r => !r.Success) > 3)
                    {
                        sb.AppendLine($"    ... 还有 {suite.Results.Count(r => !r.Success) - 3} 个失败测试");
                    }
                }
            }
            
            // 关键失败汇总
            if (results.HasCriticalFailures)
            {
                sb.AppendLine("\n关键失败汇总:");
                sb.AppendLine("----------------------------------------");
                var criticalFailures = results.Results
                    .SelectMany(r => r.Results)
                    .Where(t => !t.Success && t.Severity == SystemFunctionalTests.TestSeverity.Critical)
                    .ToList();
                
                foreach (var failure in criticalFailures)
                {
                    sb.AppendLine($"[{failure.TestSuite}] {failure.TestName}");
                    sb.AppendLine($"  错误: {failure.Message}");
                    if (failure.Exception != null)
                    {
                        sb.AppendLine($"  异常: {failure.Exception.GetType().Name}");
                    }
                    sb.AppendLine();
                }
            }
            
            // 建议和总结
            sb.AppendLine("测试总结和建议:");
            sb.AppendLine("----------------------------------------");
            
            if (results.OverallSuccessRate >= 95)
            {
                sb.AppendLine("✅ 系统整体表现优秀，所有核心功能正常工作。");
            }
            else if (results.OverallSuccessRate >= 80)
            {
                sb.AppendLine("⚠️ 系统基本功能正常，但存在一些需要改进的地方。");
            }
            else
            {
                sb.AppendLine("❌ 系统存在较多问题，需要重点关注和修复失败的测试项。");
            }
            
            if (results.HasCriticalFailures)
            {
                sb.AppendLine("🚨 发现关键功能失败，建议优先修复这些问题。");
            }
            
            sb.AppendLine($"\n平均测试执行时间: {results.TotalDuration.TotalMilliseconds / results.TotalTests:F2} ms/测试");
            sb.AppendLine($"系统稳定性评估: {(results.HasCriticalFailures ? "需要改进" : "良好")}");
            
            return sb.ToString();
        }

        #endregion

        #region 工具方法

        /// <summary>
        /// 记录日志消息
        /// </summary>
        private void LogMessage(string message)
        {
            var timestamp = DateTime.Now.ToString("HH:mm:ss.fff");
            var logEntry = $"[{timestamp}] {message}";
            _executionLog.AppendLine(logEntry);
            
            // 也可以输出到控制台或其他日志系统
            Console.WriteLine(logEntry);
        }

        /// <summary>
        /// 启用或禁用测试套件
        /// </summary>
        public void SetTestSuiteEnabled(string suiteName, bool enabled)
        {
            var suite = _testSuites.FirstOrDefault(s => s.SuiteName == suiteName);
            if (suite != null)
            {
                suite.IsEnabled = enabled;
                LogMessage($"测试套件 {suiteName} 已{(enabled ? "启用" : "禁用")}");
            }
        }

        /// <summary>
        /// 获取执行日志
        /// </summary>
        public string GetExecutionLog()
        {
            return _executionLog.ToString();
        }

        /// <summary>
        /// 清除执行日志
        /// </summary>
        public void ClearExecutionLog()
        {
            _executionLog.Clear();
        }

        #endregion

        #region 资源释放

        /// <summary>
        /// 释放资源
        /// </summary>
        public void Dispose()
        {
            _testSuites.Clear();
            _globalTestContext.Clear();
            _executionLog.Clear();
        }

        #endregion
    }
}